buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
		maven {url='https://dist.creeper.host/Sponge/maven'}
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
		classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = project.mod_version
group = project.maven_group // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = project.archives_base_name

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
   
   mappings channel: "${project.mappings_channel}", version: "${project.mappings_version}"
   
   // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            property 'mixin.env.disableRefMap', 'true'
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                golems {
                    source sourceSets.main
                }
            }
        }

        server {
            property 'mixin.env.disableRefMap', 'true'
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                golems {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven {
        name 'MMD'
        url 'https://maven.mcmoddev.com/'
    }
    maven { // HWYLA
        name 'tehnut'
        url 'https://maven.tehnut.info'
    }
	maven { // QUARK
		name 'blamejared'
		url 'https://maven.blamejared.com/'
	}
	maven { // CURSE
		name 'CurseMaven'
		url 'https://www.cursemaven.com/'
	}
	jcenter()
    mavenCentral()
}

dependencies {
	// Forge
    minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"
	
	// AutoRegLib
	compile fg.deobf("vazkii.autoreglib:AutoRegLib:${project.arl_version}") { transitive = false }
	// Quark
	compile fg.deobf("vazkii.quark:Quark:${project.quark_version}") { transitive = false }
	// CoFHCore
	compile fg.deobf("curse.maven:cofh-core-${project.cofhcore_proj}:${project.cofhcore_file}") { transitive = false }
	// Thermal Foundation
	compile fg.deobf("curse.maven:thermal-foundation-${project.thermalfoundation_proj}:${project.thermalfoundation_file}") { transitive = false }
	// CLib
	compile fg.deobf("curse.maven:clib-${project.clib_proj}:${project.clib_file}") { transitive = false }
	// Mekanism
	compile fg.deobf("curse.maven:mekanism-${project.mekanism_proj}:${project.mekanism_file}") { transitive = false }
	// Immersive Engineering
	compile fg.deobf("curse.maven:immersive-engineering-${project.ie_proj}:${project.ie_file}") { transitive = false }
	
	// HWYLA
	compileOnly fg.deobf("mcp.mobius.waila:Hwyla:${project.hwyla_version}:api")
	runtimeOnly fg.deobf("mcp.mobius.waila:Hwyla:${project.hwyla_version}")
}
processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include "META-INF/mods.toml"
        expand "golems_version": project.version
        expand "forge_version": project.forge_version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "META-INF/mods.toml"
    }
}
// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title": "Extra-Golems",
                "Specification-Vendor": "skyjay1 and the MMD Team",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"skyjay1",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact reobfArtifact
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

apply plugin: 'org.spongepowered.mixin'

javadoc {
  failOnError = false
}

task deobfJar(type: Jar, dependsOn: 'jar') {
    from "build/source/main"
    classifier "dev"
}
artifacts {
    archives deobfJar
}

task javadocJar(type: Jar, dependsOn: 'javadoc') {
    from "build/docs/javadoc"
    classifier "javadoc"
}
artifacts {
    archives javadocJar
}
